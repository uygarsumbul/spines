cd ~/spines/repo
code{1}{1}                               = '9_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{2}{1}                               = '18_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{3}{1}                               = '19_unsampled_reconstruction_stitched_connected_labelled.eswc';
code{4}{1}                               = '20_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{5}{1}                               = '21_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{6}{1}                               = '22_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{7}{1}                               = '23_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{8}{1}                               = '24_upsampled_reconstruction_stitched_connected_labelled.eswc';
code{9}{1}                               = '25_upsampled_reconstruction_stitched_connected_labelled.eswc';
directory                                = '/home/uygar/spines/data/upsampledFinalReconstructions/';
options.resolution                       = [0.12 0.12 0.1];
allTrees                                 = readDataset_spines(code,directory,options);
[counts,centers, allCounts, allPairwiseDistances] = pairwiseDistanceDistribution_inhOnSpine(allTrees, 18, 80, 0.5);
figure;plot(centers, counts/sum(counts)/0.5,'LineWidth',2);
hold;for tr=1:numel(allCounts); plot(centers, allCounts{tr}/sum(allCounts{tr})/0.5,'LineWidth',2,'Color',[0.7 0.7 0.7]); end;
plot(centers, counts/sum(counts)/0.5);
figure;hold;for tr=1:numel(allCounts); plot(centers, allCounts{tr}/sum(allCounts{tr})/0.5,'Color',[0.7 0.7 0.7]); end; plot(centers, counts/sum(counts)/0.5,'LineWidth',2); 
allTreesS                                 = readDataset_spines_shuffleInhOnSpines(code,directory,options);
[countsS,centersS, allCountsS, allPairwiseDistancesS] = pairwiseDistanceDistribution_inhOnSpine(allTreesS, 18, 80, 0.5);
plot(centersS, countsS/sum(countsS)/0.5,'LineWidth',2,'Color','r');
figure;hold;for tr=1:numel(allCountsS); plot(centersS, allCountsS{tr}/sum(allCountsS{tr})/0.5,'Color',[0.7 0.7 0.7]); end; plot(centersS, countsS/sum(countsS)/0.5,'LineWidth',2,'Color','r');
figure(1);ylim([0 0.21]); figure(2);ylim([0 0.21]);
set(gca,'FontSize',16);xlabel('pairwise distance between IS on spines (\mu)', 'FontSize', 16); ylabel('frequency', 'FontSize', 16); set(gcf, 'Color','w')
saveas(gcf, '/home/uygar/spines/results/pairwiseDistancePDFforISOnSpines.jpg');
close 
set(gca,'FontSize',16);xlabel('pairwise distance between IS on spines (\mu)', 'FontSize', 16); ylabel('frequency', 'FontSize', 16); set(gcf, 'Color','w'); title('Shuffled IS','FontSize',16);
saveas(gcf, '/home/uygar/spines/results/pairwiseDistancePDFforShuffledISOnSpines.jpg');


allOneSidedP = []; allSampleSTD = []; all5quantile = []; all95quantile = [];
cd ~/spines/repo
[allIonECounts allIonlyCounts totalIonECount totalIonlyCount] = returnAllRatios_inhOnSpines(allTrees, 1);
allIonECounts = cell2mat(allIonECounts);
allIonlyCounts      = cell2mat(allIonlyCounts);
allIonERatios      = allIonECounts ./ (allIonlyCounts+allIonECounts);
iFr              = totalIonECount / (totalIonlyCount+totalIonECount);
sampleSTD            = std(allIonERatios);
endPoints            = cumsum(allIonECounts);
allShufflesSTD       = zeros(1, 1000);
for tt = 1:numel(allShufflesSTD)
  shuffledIonE = randperm(totalIonlyCount+totalIonECount, round(iFr*(totalIonlyCount+totalIonECount)));
  prevCount = 0;
  for kk = 1:numel(allIonERatios)
    thisCount         = nnz(endPoints(kk)>=shuffledIonE);
    shuffledRatio(kk) = (thisCount-prevCount) / (allIonlyCounts(kk)+allIonECounts(kk));
    prevCount         = thisCount;
  end
  allShufflesSTD(tt)  = std(shuffledRatio);
end
oneSided_p = nnz(sampleSTD<allShufflesSTD)/numel(allShufflesSTD); allOneSidedP(end+1)=oneSided_p; allSampleSTD(end+1)=sampleSTD;
all5quantile(end+1)=quantile(allShufflesSTD,0.05); all95quantile(end+1)=quantile(allShufflesSTD,0.95);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
temp2 = zeros(10, numel(pairAndSomaDistances));
for kk=0:9
  [~,~,~, pairAndSomaDistances] = pairwiseDistanceDistribution_scratch2(allTrees, 'spine', -1:1, 0.1*kk+eps, 'apical', 'terminal'); for mm=1:numel(pairAndSomaDistances); tt(mm)=size(pairAndSomaDistances{mm},1); end;
  [~,~,~, pairAndSomaDistances] = pairwiseDistanceDistribution_scratch2(allTrees, 'spine', -1:1, 0.1*kk+eps, 'apical', 'intermediate'); for mm=1:numel(pairAndSomaDistances); ti(mm)=size(pairAndSomaDistances{mm},1); end;
  temp2(kk+1,:)=tt./ti;
end



[allPairwiseDistances, allXYZofNodesOfInterest, allSomaDistancesOfNodesOfInterest, pairAndSomaDistances] = pairwiseDistanceDistribution_scratch2(trees, 'spine', -1:1, 0.8, 'apical', 'intermediateOrTerminal');

h = fspecial('gaussian', [1 19], 3);


for kk = 1:numel(trees)
  pD = []; sD = [];
  for mm = 1:numel(trees{kk})
    pD = [pD; allPairwiseDistances{kk}{mm}]; sD = [sD; (allSomaDistancesOfNodesOfInterest{kk}{mm}(1:end-1)+allSomaDistancesOfNodesOfInterest{kk}{mm}(2:end))/2];
  end
  aPD{kk} = pD; aSD{kk} = sD;
  tmp = aSD{kk}/400; tmp = tmp - 0.5;

  tpd = aPD{kk}; tpd = tpd-min(tpd); tpd = tpd/max(tpd);
  tsd = aSD{kk}; tsd = tsd-min(tsd); tsd = tsd/max(tsd);
  ks = tpd+i*tsd;
  [ksv, ia, ic] = unique(ks(:));
  tmp=tmp(ia); aPD{kk}=aPD{kk}(ia); aSD{kk}=aSD{kk}(ia);
  ext = size(ksv,1);
  [maxks, idx] = max(abs(ksv));
  dk = 0.001; % 0.005; % abs(ksv(idx)) - abs(ksv(idx-1));
  vec1 = linspace(-dk,1+dk,200);
  vec2 = linspace(-dk,1+dk,200);
  [xx, yy] = meshgrid(vec1,vec2);
  rectPoints = xx(:)+i*yy(:);
  tessDist = sqrt(pdist2(real(rectPoints), real(ksv)).^2 + pdist2(imag(rectPoints), imag(ksv)).^2);
  rectPoints(any(tessDist<dk,2)) = [];
  ksv2 = [ksv' rectPoints'];
  dens = voronoidens(real(ksv2), imag(ksv2));
  dens = dens(1:ext);
  interpolated(:,kk) = pureGridder1d(tmp, dens'.*aPD{kk}/sum(aPD{kk}), 100);
end
standardizedSD = 0:10:390;


kk=1;for tt=5:280; temp(tt-4)=mean(aPD{kk}(aSD{kk}<tt+5 & aSD{kk}>=tt-5)); end;


  ks = aPD{kk}+i*aSD{kk};
  ksv = ks(:);
  ext = size(ksv,1);
  [maxks, idx] = max(abs(ksv));
  dk = abs(ksv(idx)) - abs(ksv(idx-1));
  circle = (maxks + dk)*exp(i*2*pi*(0:0.001:(1-0.001)));
  ksv2 = [ksv' circle];
  dens = voronoidens(real(ksv2), imag(ksv2));
  dens = dens(1:ext);













load ~/spines/data/shuffledTrees/trueTrees12.mat
spineOrIS={'spine', 'IS'};
synType            = {{'spine', [-1 0 1], 0, '-101'}, {'spine', [-1 0 1], 0.8, '-101'}, {'IS', 0, 0, '0'}, {'IS', 0, 0.8, '0'}, {'IS', 1, 0, '1'}, {'IS', 1, 0.8, '1'}, {'IS', [0 1], 0, '01'}, {'IS', [0 1], 0.8, '01'}};
denType            = {{'basal', {'primary', 'intermediate', 'terminal'}}, {'apical', {'primary', 'intermediate', 'terminal'}}, {'apicalTrunk', {'primaryOrIntermediateOrTerminal'}}, {'apicalOblique', {'intermediate', 'terminal'}}, {'apicalTuft', {'intermediate', 'terminal'}}};
for kk1=1:numel(synType)
for kk2=1:numel(denType)
for kk3=1:numel(denType{kk2}{2}) 
[compartmentalLength eventCount] = compartments_lengthAndEventCount(trees, synType{kk1}{1},denType{kk2}{1},denType{kk2}{2}{kk3},synType{kk1}{3},synType{kk1}{2});
for tr=1:numel(trees); fn=['/home/uygar/spines/results/branchLevelAnalysis/compartments_' synType{kk1}{1} '_ISonShaft' synType{kk1}{4} '_quartile' num2str(synType{kk1}{3}) '_' denType{kk2}{1} '_' denType{kk2}{2}{kk3} '_neuron' num2str(tr)];         
fn=[fn '_length' num2str(compartmentalLength(tr)) '_count' num2str(eventCount(tr)) '.txt'];
fid=fopen(fn,'w'); fwrite(fid,0); fclose(fid);
end
end
end
end



parSet{1}     = {'spine', 'apicalTuft'   , 'terminal'                       , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalOblique', 'terminal'                       , 1e-6, [-1 0 1]};
%parSet{end+1} = {'spine', 'apicalTrunk'  , 'terminal'                       , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apical'       , 'terminal'                       , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'basal'        , 'terminal'                       , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalTuft'   , 'intermediate'                   , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalOblique', 'intermediate'                   , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalTrunk'  , 'intermediate'                   , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apical'       , 'intermediate'                   , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'basal'        , 'intermediate'                   , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalTuft'   , 'intermediateOrTerminal'         , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalOblique', 'intermediateOrTerminal'         , 1e-6, [-1 0 1]};
%parSet{end+1} = {'spine', 'apicalTrunk'  , 'intermediateOrTerminal'         , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apical'       , 'intermediateOrTerminal'         , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'basal'        , 'intermediateOrTerminal'         , 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalTuft'   , 'primaryOrIntermediateOrTerminal', 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apicalOblique', 'primaryOrIntermediateOrTerminal', 1e-6, [-1 0 1]};
%parSet{end+1} = {'spine', 'apicalTrunk'  , 'primaryOrIntermediateOrTerminal', 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'apical'       , 'primaryOrIntermediateOrTerminal', 1e-6, [-1 0 1]};
parSet{end+1} = {'spine', 'basal'        , 'primaryOrIntermediateOrTerminal', 1e-6, [-1 0 1]};
parSet{1}     = {'IS'   , 'apicalTuft'   , 'terminal'                       , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalOblique', 'terminal'                       , 1e-6, [0 1]};
%parSet{end+1} = {'IS'   , 'apicalTrunk'  , 'terminal'                       , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apical'       , 'terminal'                       , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'basal'        , 'terminal'                       , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalTuft'   , 'intermediate'                   , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalOblique', 'intermediate'                   , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalTrunk'  , 'intermediate'                   , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apical'       , 'intermediate'                   , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'basal'        , 'intermediate'                   , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalTuft'   , 'intermediateOrTerminal'         , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalOblique', 'intermediateOrTerminal'         , 1e-6, [0 1]};
%parSet{end+1} = {'IS'   , 'apicalTrunk'  , 'intermediateOrTerminal'         , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apical'       , 'intermediateOrTerminal'         , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'basal'        , 'intermediateOrTerminal'         , 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalTuft'   , 'primaryOrIntermediateOrTerminal', 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apicalOblique', 'primaryOrIntermediateOrTerminal', 1e-6, [0 1]};
%parSet{end+1} = {'IS'   , 'apicalTrunk'  , 'primaryOrIntermediateOrTerminal', 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'apical'       , 'primaryOrIntermediateOrTerminal', 1e-6, [0 1]};
parSet{end+1} = {'IS'   , 'basal'        , 'primaryOrIntermediateOrTerminal', 1e-6, [0 1]};

for pS=1:numel(parSet)
  disp([parSet{pS}{1} ', ' parSet{pS}{2} ', ' parSet{pS}{3}]);
  featureDensityTest(parSet{pS}{1}, parSet{pS}{2}, parSet{pS}{3}, parSet{pS}{4}, parSet{pS}{5}, 5, 10000);
end
